{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploy the Simple Demo App inside a VPC. Authored by Daniel Wright",
  "Parameters": {
    "ec2ImageParameter": {
      "Default": "ami-XXXXXXXX",
      "Type": "String"
    },
    "keyName": {
      "Default": "NT-Oregon",
      "Description": "Name of pem file to use when launching instances",
      "Type": "String"
    },
    "vpcCidr": {
      "Default": "10.50.0.0/16",
      "Description": "CIDR Block of your VPC For SecurityGroups",
      "Type": "String"
    },
    "privateSubnet1": {
      "Description": "Private Subnet 1 of VPC",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "privateSubnet2": {
      "Description": "Private Subnet 2 of VPC",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "publicSubnet1": {
      "Description": "Public Subnet 1 of VPC",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "publicSubnet2": {
      "Description": "Public Subnet 2 of VPC",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "vpcId": {
      "Description": "VPC associated with the provided subnets",
      "Type": "AWS::EC2::VPC::Id"
    },
    "authdBPassword": {
      "Default": "CHANGE_ME_RIGHT_NOW!",
      "Description": "Enter a DB Master Password",
      "Type": "String"
    },
    "authdBUser": {
      "Default": "root",
      "Description": "Enter a DB Master User",
      "Type": "String"
    },
    "authDb": {
      "Description": "Default RDS Database for Auth Service",
      "Type": "String",
      "Default": "authdb"
    },
    "rdsEndpoint": {
      "Description": "RDS Endpoint of Auth DB",
      "Type": "String",
      "Default": "ENTER YOUR RDS ENDPOINT"
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-southeast-2": {
        "AMI": "ami-XXXXXXXX"
      },
      "us-west-1": {
        "AMI": "ami-XXXXXXXX"
      },
      "us-west-2": {
        "AMI": "ami-XXXXXXXX"
      }
    }
  },
  "Resources": {
    "autoScalingGroup": {
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "launchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "elasticLoadBalancer"
          }
        ],
        "MaxSize": "4",
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupMinSize",
              "GroupMaxSize"
            ]
          }
        ],
        "MinSize": "2",
        "VPCZoneIdentifier": [
          {
            "Ref": "privateSubnet1"
          },
          {
            "Ref": "privateSubnet2"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT2M30S"
        }
      }
    },
    "demoAppSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow All Traffic From Simple Office",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Ref": "vpcCidr" },
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Demo-App-Security-Group"
          }
        ],
        "VpcId": {
          "Ref": "vpcId"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "elasticLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "30",
          "Target": "TCP:80",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "demoAppSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "publicSubnet1"
          },
          {
            "Ref": "publicSubnet2"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "launchConfiguration": {
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config": {
            "packages" : {
              "python" : {
                "awscli":[]
              }
            },
            "files" : {
              "/root/more-docker-envs" : {
                "content": { "Fn::Join": [ "\n", [
                      "DB_USER={{db_user}}",
                      "DB_PASSWORD={{db_password}}",
                      "AUTH_DB={{auth_db}}",
                      "AUTH_DB_URI={{auth_db_uri}}"
                    ]]},
                "context" : {
                  "db_user": { "Ref" : "authdBUser" },
                  "db_password": { "Ref": "authdBPassword" },
                  "auth_db": { "Ref": "authDb" },
                  "auth_db_uri": { "Fn::Join": [ ":", [
                    { "Ref": "authDb" },
                    "3306"
                    ] ] }
                },
                "mode"    : "000700",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "ec2ImageParameter"
        },
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "keyName"
        },
        "SecurityGroups": [
          {
            "Ref": "demoAppSecurityGroup"
          }
        ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "sudo echo DB_USER=", { "Ref": "authdBUser" }, " >> /root/docker-envs", "\n",
          "sudo echo DB_PASSWORD=", { "Ref": "authdBPassword" }, " >> /root/docker-envs", "\n",
          "sudo echo AUTH_DB=", { "Ref": "authDb" }, " >> /root/docker-envs", "\n",
          "sudo echo AUTH_DB_URI=", { "Ref": "rdsEndpoint" }, ":3306", " >> /root/docker-envs", "\n",
          "#EOF"
              ]
            ]
          }
        }
      },
    "Type": "AWS::AutoScaling::LaunchConfiguration"
    }
  },
  "Outputs": {
    "DnsAddress": {
      "Description": "DemoApp ELB URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "elasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "demoAppSecurityGroup": {
      "Description": "Security Group of Demo App",
      "Value": {
        "Ref": "demoAppSecurityGroup"
      }
    },
    "elasticLoadBalancer": {
      "Description": "Elastic Load Balancer",
      "Value": {
        "Ref": "elasticLoadBalancer"
      }
    }
  }
}
